package bulma

import "github.com/jtom38/templ-bulma/html"

//#region Breadcrumb
// https://bulma.io/documentation/components/breadcrumb/
templ NewBreadcrumb(alignment, separator, size string) {
	<nav class={ "breadcrumb", alignment, separator, size } aria-label="breadcrumbs">
		<ul>
			{ children... }
		</ul>
	</nav>
}

templ BreadcrumbPrevious(url, text string) {
	<li>
		@html.ALink(url, text)
	</li>
}

// https://bulma.io/documentation/components/breadcrumb/
templ BreadcrumbPreviousIcon(url, text, faIcon string) {
	<li>
		<a href={ templ.SafeURL(url) }>
			@IconText(faIcon, text)
		</a>
	</li>
}

// https://bulma.io/documentation/components/breadcrumb/
templ BreadcrumbActive(url, text string) {
	<li class="is-active">
		<a href={ templ.SafeURL(url) } aria-current="page">{ text }</a>
	</li>
}

// https://bulma.io/documentation/components/breadcrumb/
templ BreadcrumbActiveIcon(url, text, faIcon string) {
	<li class="is-active">
		<a href={ templ.SafeURL(url) } aria-current="page">
			@IconText(faIcon, text)
		</a>
	</li>
}

templ ExampleBreadcrumb() {
	@NewBreadcrumb(AlignmentLeft, SeparatorDefault, SizeDefault) {
		@BreadcrumbPrevious("/", "Index")
		@BreadcrumbPrevious("/config", "Config")
		@BreadcrumbActive("/config/secrets", "Secrets")
	}
}

//#endregion

//#region Card

// Creates a card container.
// Accepts children
//
// https://bulma.io/documentation/components/card/
templ NewCard() {
	<div class="card">
		{ children... }
	</div>
}

// Creates a image card container.
// Accepts children
templ CardImage(imageSize, src, alt string) {
	<div class="card-image">
		<figure class={ "image", imageSize }>
			<img src={ src } alt={ alt }/>
		</figure>
	</div>
}

// Creates a basic header for a Card that just has text
templ CardHeader(title string) {
	<header class="card-header">
		<p class="card-header-title">{ title }</p>
		{ children... }
	</header>
}

// This is used to create a header within a card.
// Use this version if you want to have an icon added.
templ CardHeaderIcon(title string) {
	<header class="card-header">
		<p class="card-header-title">{ title }</p>
		<button class="card-header-icon" aria-label="more options">
			<span class="icon">
				<i class="fas fa-angle-down" aria-hidden="true"></i>
			</span>
		</button>
	</header>
}

// a multi-purpose container for any other element
//
// Accepts Children
templ CardContent() {
	<div class="card-content">
		{ children... }
	</div>
}

// a horizontal list of controls
//
// Accepts Children
templ CardFooter() {
	<footer class="card-footer">
		{ children... }
	</footer>
}

templ CardFooterItem(url, text string) {
	<a href={ templ.SafeURL(url) } class="card-footer-item">{ text }</a>
}

templ ExampleCard() {
	@NewCard() {
		@CardHeaderIcon("Example Card")
		@CardImage(ImageIs128x128, "https://...", "A Picture")
		@CardContent() {
			@Media() {
				@MediaLeft() {
					@ImageSrc(ImageIs128x128, "https://...", "Its a picture")
				}
				@Title("Ryan Renolds")
				@Subitle("@therealdeadpool")
				@MediaContent() {
					@Content() {
						"What?  Did you expect something useful?"
					}
				}
			}
		}
		@CardFooter() {
			@CardFooterItem("/article/1234/edit", "Edit")
			@CardFooterItem("/article/1234/save", "Save")
			@CardFooterItem("/article/1234/delete", "Delete")
		}
	}
}

//#endregion

//#region Dropdown

// Creates a dropdown menu.
//
// https://bulma.io/documentation/components/dropdown/
templ NewDropdown() {
	<div class="dropdown">
		{ children... }
	</div>
}

// Controls needs to match up with the same controls in the DropdownMenu() so it works together
//
// https://bulma.io/documentation/components/dropdown/
templ DropdownTrigger(text, controls string) {
	<div class="dropdown-trigger">
		<button class="button" aria-haspopup="true" aria-controls={ controls }>
			<span>{ text }</span>
			<span class="icon is-small">
				<i class="fas fa-angle-down" aria-hidden="true"></i>
			</span>
		</button>
	</div>
}

// Accepts Children
//
// https://bulma.io/documentation/components/dropdown/
templ DropdownMenu(controls string) {
	<div class="dropdown-menu" id={ controls } role="menu">
		<div class="dropdown-content">
			{ children... }
		</div>
	</div>
}

templ DropdownMenuLink(url, text string) {
	<a href={ templ.SafeURL(url) } class="dropdown-item">{ text }</a>
}

templ DropdownMenuSeperator() {
	<hr class="dropdown-divider"/>
}

templ ExampleDropdown() {
	@NewDropdown() {
		@DropdownTrigger("Demo", "demo-menu")
		@DropdownMenu("demo-menu") {
			@DropdownMenuLink("https://bulma.io", "Bulma CSS")
			@DropdownMenuLink("https://github.com/a-h/templ", "Templ")
			@DropdownMenuSeperator()
			@DropdownMenuLink("https://www.google.com", "Google")
		}
	}
}

//#endregion

//#region Menu

// Accepts Children
//
// https://bulma.io/documentation/components/menu/
templ NewMenu() {
	<aside class="menu">
		{ children... }
	</aside>
}

templ MenuLabel(text string) {
	<p class="menu-label">{ text }</p>
}

templ MenuList() {
	<ul class="menu-list">
		{ children... }
	</ul>
}

templ MenuListItem(url, title string) {
	<li>
		@html.ALink(url, title)
	</li>
}

templ ExampleMenu() {
	@NewMenu() {
		@MenuLabel("CSS Frameworks")
		@MenuList() {
			@MenuListItem("https://bulma.io", "Bulma")
		}
		@MenuLabel("Github Links")
		@MenuList() {
			@MenuListItem("https://github.com/jtom38/templ-bulma", "templ-bulma")
			@MenuListItem("https://github.com/a-h/templ", "templ")
			@MenuListItem("#", "placeholder")
		}
	}
}

//#endregion

//#region Message

// Colored message blocks, to emphasize part of your page.
//
// Accepts Children
//
// https://bulma.io/documentation/components/message/
templ NewMessage(size, color string) {
	<article class={ "message", size, color }></article>
}

// This is an optional item on the Message
templ MessageWithHeader(text string) {
	<div class="message-header">
		<p>{ text }</p>
		<!--
		<button class="delete is-small" aria-label="delete"></button>
        -->
	</div>
}

// Accepts Children
//
// Pass in the text with some basic html tags only.
// Should support @bulma.Content() but its not validated at this time.
templ MessageBody() {
	<div class="message-body">
		{ children... }
	</div>
}

//#endregion

//#region Model

// Creates a new model object.
// To use this correctly see bulma.RequiredModelScript()
//
// https://bulma.io/documentation/components/modal/
templ NewModel() {
	<div class="modal">
		<div class="modal-background"></div>
		{ children... }
		<button class="modal-close" aria-label="close"></button>
	</div>
}

// Accepts Children
//
// You can use any bulma object within a model
templ ModelContent() {
	<div class="modal-content">
		{ children... }
	</div>
}

//#endregion

//#region Navbar
// Accepts Children
//
// https://bulma.io/documentation/components/navbar/
templ NewNavbar() {
	<nav class="navbar" role="navigation" aria-label="main navigation">
		{ children... }
	</nav>
}

// On the left side, always visible, which usually contains the logo and optionally some links or icons
//
// Accepts Children
templ NavbarBrand() {
	<div class="navbar-brand">
		{ children... }
	</div>
}

templ NavbarItem(url, text string) {
	<a class="navbar-item" href={ templ.SafeURL(url) }>{ text }</a>
}

// This is ideal if you want to use something like svg
templ NavbarItemChildren(url string) {
	<a class="navbar-item" href={ templ.SafeURL(url) }>
		{ children... }
	</a>
}

templ NavbarBrandBurger(dataTarget string) {
	<a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false" data-target={ dataTarget }>
		<span aria-hidden="true"></span>
		<span aria-hidden="true"></span>
		<span aria-hidden="true"></span>
		<span aria-hidden="true"></span>
	</a>
}

templ NavbarMenu(dataTarget string) {
	<div id={ dataTarget } class="navbar-menu">
		{ children... }
	</div>
}

templ NavbarStart() {
	<div class="navbar-start">
		{ children... }
	</div>
}

templ NavbarItemDropdown(text string) {
	<div class="navbar-item has-dropdown is-hoverable">
		<a class="navbar-link">{ text }</a>
		<div class="navbar-dropdown">
			{ children... }
		</div>
	</div>
}

templ NavbarItemDropdownDivider() {
	<hr class="navbar-divider"/>
}

// This is an example on how to setup a Navbar.
// Don't use this in your project.
templ NavbarExample() {
	@NewNavbar() {
		@NavbarBrand() {
			@NavbarItem("/", "Home")
			@NavbarBrandBurger("mainNavbarMenu")
		}
		@NavbarMenu("mainNavbarMenu") {
			@NavbarItem("/", "Home")
			@NavbarItem("/documentation", "Documentation")
			@NavbarItemDropdown("More") {
				@NavbarItem("/about", "About")
				@NavbarItem("/jobs", "Jobs")
				@NavbarItem("/contact", "Contact Us")
				@NavbarItemDropdownDivider()
				@NavbarItem("/issue", "Report an issue")
			}
		}
	}
}

//#endregion

//#region Pagination

// https://bulma.io/documentation/components/pagination/
templ NewPagination() {
	<nav class="pagination" role="navigation" aria-label="pagination">
		{ children... }
	</nav>
}

templ PaginationPrevious(url, text string) {
	<a href={ templ.SafeURL(url) } class="pagination-previous">{ text }</a>
}

templ PaginationNext(url, text string) {
	<a href={ templ.SafeURL(url) } class="pagination-next">{ text }</a>
}

templ PaginationList() {
	<ul class="pagination-list">
		{ children... }
	</ul>
}

templ PaginationListItem(url, text, ariaLabel string) {
	<li>
		<a href={ templ.SafeURL(url) } class="pagination-link" aria-label="Goto page 1">{ text }</a>
	</li>
}

templ PaginationEllispsis() {
	<li>
		<span class="pagination-ellipsis">&hellip;</span>
	</li>
}

templ PaginationActive(text, ariaLabel string) {
	<li>
		<a class="pagination-link is-current" aria-label={ ariaLabel } aria-current="page">{ text }</a>
	</li>
}

templ PaginationExample() {
	@NewPagination() {
		@PaginationPrevious("/articles?page=10", "Previous")
		@PaginationList() {
			@PaginationListItem("/articles?page=1", "1", "Goto page 1")
			@PaginationEllispsis()
			@PaginationActive("11", "Page 11")
			@PaginationEllispsis()
			@PaginationListItem("/articles?page=100", "100", "Goto page 100")
		}
		@PaginationNext("/articles?page=12", "Next")
	}
}

//#endregion

//#region Panel
templ NewPanel(color string) {
	<nav class={ "panel", color }>
		{ children... }
	</nav>
}

templ PanelHeader(text string) {
	<p class="panel-heading">{ text }</p>
}

templ PanelHeaderIcon(text, faIcon string) {
	<p class="panel-heading">{ text }</p>
	<div class="panel-block">
		<p class="control has-icons-left">
			<input class="input" type="text" placeholder="Search"/>
			<span class="icon is-left">
				<i class={ "fas", faIcon } aria-hidden="true"></i>
			</span>
		</p>
	</div>
}

// Accepts Children
templ PanelTabs() {
	<p class="panel-tabs">
		{ children... }
	</p>
}

templ PanelTabItem(url, text string) {
	@html.ALink(url, text)
}

templ PanelTabItemActive(url, text string) {
	<a href={ templ.SafeURL(url) } class="is-active">{ text }</a>
}

// Supports contain other elements, like control input, button, panel-icon
templ PanelBlock(url, text, faIcon string, isActive bool) {
	if isActive {
		<a href={ templ.SafeURL(url) } class="panel-block is-active">
			<span class="panel-icon">
				<i class={ "fas", faIcon } aria-hidden="true"></i>
			</span>
			{ text }
		</a>
	} else {
		<a href={ templ.SafeURL(url) } class="panel-block">
			<span class="panel-icon">
				<i class={ "fas", faIcon } aria-hidden="true"></i>
			</span>
			{ text }
		</a>
	}
}

//#endregion

//#region Tabs

// https://bulma.io/documentation/components/tabs/
templ NewTab(alignment, size, style string, isFullWidth bool) {
	if isFullWidth {
		<div class={ "tabs", alignment, style }>
			<ul>
				{ children... }
			</ul>
		</div>
	} else {
		<div class={ "tabs", "is-fullwidth", alignment, style }>
			<ul>
				{ children... }
			</ul>
		</div>
	}
}

templ TabLink(url, text, fontAwesomeIcon string, isActive bool) {
	if isActive {
		<li class="is-active">
			<a href={ templ.SafeURL(url) }>{ text }</a>
		</li>
	} else {
		<li>
			<a href={ templ.SafeURL(url) }>{ text }</a>
		</li>
	}
}

templ TabLinkIcon(url, text, fontAwesomeIcon string, isActive bool) {
	if isActive {
		<li class="is-active">
			<a href={ templ.SafeURL(url) }>
				<span class="icon is-small">
					<i class={ "fas", fontAwesomeIcon } aria-hidden="true"></i>
				</span>
				<span>{ text }</span>
			</a>
		</li>
	} else {
		<li>
			<a href={ templ.SafeURL(url) }>
				<span class="icon is-small">
					<i class={ "fas", fontAwesomeIcon } aria-hidden="true"></i>
				</span>
				<span>{ text }</span>
			</a>
		</li>
	}
}

//#endregion
